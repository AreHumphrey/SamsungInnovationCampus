import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score
from sklearn.cluster import KMeans

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ Physical_Activity_Monitoring_unlabeled.csv...")
df = pd.read_csv('Physical_Activity_Monitoring_unlabeled.csv')

# –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
features = df.drop(columns=['timestamp', 'subject_id'], errors='ignore')

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
print("‚öôÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏...")
imputer = SimpleImputer(strategy='mean')
features_imputed = imputer.fit_transform(features)

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features_imputed)

# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–æ—Ç 5 –¥–æ 10) –∏ –≤—ã–±–µ—Ä–µ–º –ª—É—á—à–µ–µ –ø–æ —Å–∏–ª—É—ç—Ç—É
best_score = -1
best_n_clusters = 6
best_labels = None

print("üîç –ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤...")
for n in range(5, 11):
    kmeans = KMeans(n_clusters=n, random_state=42, n_init='auto')
    labels = kmeans.fit_predict(features_scaled)
    score = silhouette_score(features_scaled, labels)
    print(f"  n_clusters = {n}, silhouette = {score:.4f}")
    if score > best_score:
        best_score = score
        best_n_clusters = n
        best_labels = labels

print(f"‚úÖ –õ—É—á—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {best_n_clusters}, silhouette = {best_score:.4f}")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º Gaussian Mixture –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
print("üß† –û–±—É—á–∞–µ–º GaussianMixture...")
gmm = GaussianMixture(n_components=best_n_clusters, random_state=42)
gmm_labels = gmm.fit_predict(features_scaled)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –∫ –ø–æ—Ä—è–¥–∫—É: 0->1, 1->2, ..., N-1->N
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
gmm_labels = le.fit_transform(gmm_labels) + 1

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
print("üíæ –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª predict.csv...")
result = pd.DataFrame({
    'Index': range(1, len(gmm_labels) + 1),
    'activityID': gmm_labels
})

result.to_csv('predict.csv', index=False)
print("‚úÖ –§–∞–π–ª predict.csv —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
print(f"üìä –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫:\n{result.head(10)}")